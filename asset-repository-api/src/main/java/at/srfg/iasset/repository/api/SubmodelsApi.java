/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package at.srfg.iasset.repository.api;

import java.util.List;

import javax.validation.Valid;

import org.eclipse.aas4j.v3.model.Submodel;
import org.eclipse.aas4j.v3.model.SubmodelElement;
import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import at.srfg.iasset.repository.model.OperationRequest;
import at.srfg.iasset.repository.model.OperationResult;
import at.srfg.iasset.repository.model.Result;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-08-06T18:15:09.134Z[GMT]")
@Validated
public interface SubmodelsApi {

    @Operation(summary = "Deletes a Submodel", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Submodel deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSubmodelById(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier);


    @Operation(summary = "Deletes a submodel element at a specified path within the submodel elements hierarchy", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Submodel element deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSubmodelElementByPathSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.PATH, description = "IdShort path to the submodel element (dot-separated)", required=true, schema=@Schema()) @PathVariable("idShortPath") String idShortPath);


    @Operation(summary = "Returns all submodel elements including their hierarchy", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of found submodel elements", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SubmodelElement.class)))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SubmodelElement>> getAllSubmodelElementsSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.QUERY, description = "Determines the structural depth of the respective resource content" ,schema=@Schema(allowableValues={ "deep", "core" }
, defaultValue="deep")) @Valid @RequestParam(value = "level", required = false, defaultValue="deep") String level, @Parameter(in = ParameterIn.QUERY, description = "Determines the request or response kind of the resource" ,schema=@Schema(allowableValues={ "normal", "metadata", "value", "reference", "path" }
, defaultValue="normal")) @Valid @RequestParam(value = "content", required = false, defaultValue="normal") String content, @Parameter(in = ParameterIn.QUERY, description = "Determines to which extent the resource is being serialized" ,schema=@Schema(allowableValues={ "withBlobValue", "withoutBlobValue" }
)) @Valid @RequestParam(value = "extent", required = false) String extent);


    @Operation(summary = "Returns all Submodels", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested Submodels", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Submodel.class)))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Submodel>> getAllSubmodels(@Parameter(in = ParameterIn.QUERY, description = "The value of the semantic id reference (BASE64-URL-encoded)" ,schema=@Schema()) @Valid @RequestParam(value = "semanticId", required = false) String semanticId, @Parameter(in = ParameterIn.QUERY, description = "The Submodel’s idShort" ,schema=@Schema()) @Valid @RequestParam(value = "idShort", required = false) String idShort);


    @Operation(summary = "Downloads file content from a specific submodel element from the Submodel at a specified path", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested file", content = @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "405", description = "Method not allowed - Download only valid for File submodel element", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment",
        produces = { "application/octet-stream", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> getFileByPathSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.PATH, description = "IdShort path to the submodel element (dot-separated)", required=true, schema=@Schema()) @PathVariable("idShortPath") String idShortPath);


    @Operation(summary = "Returns the Operation result of an asynchronous invoked Operation", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operation result object", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OperationResult.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OperationResult> getOperationAsyncResultSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.PATH, description = "IdShort path to the submodel element (dot-separated), in this case an operation", required=true, schema=@Schema()) @PathVariable("idShortPath") String idShortPath, @Parameter(in = ParameterIn.PATH, description = "The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("handleId") String handleId, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema(allowableValues={ "normal", "value" }
, defaultValue="normal")) @Valid @RequestParam(value = "content", required = false, defaultValue="normal") String content);


    @Operation(summary = "Returns a specific Submodel", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested Submodel", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Submodel.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Submodel> getSubmodelById(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier);


    @Operation(summary = "Returns a specific submodel element from the Submodel at a specified path", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested submodel element", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubmodelElement.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubmodelElement> getSubmodelElementByPathSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.PATH, description = "IdShort path to the submodel element (dot-separated)", required=true, schema=@Schema()) @PathVariable("idShortPath") String idShortPath, @Parameter(in = ParameterIn.QUERY, description = "Determines the structural depth of the respective resource content" ,schema=@Schema(allowableValues={ "deep", "core" }
, defaultValue="deep")) @Valid @RequestParam(value = "level", required = false, defaultValue="deep") String level, @Parameter(in = ParameterIn.QUERY, description = "Determines the request or response kind of the resource" ,schema=@Schema(allowableValues={ "normal", "metadata", "value", "reference", "path" }
, defaultValue="normal")) @Valid @RequestParam(value = "content", required = false, defaultValue="normal") String content, @Parameter(in = ParameterIn.QUERY, description = "Determines to which extent the resource is being serialized" ,schema=@Schema(allowableValues={ "withBlobValue", "withoutBlobValue" }
)) @Valid @RequestParam(value = "extent", required = false) String extent);


    @Operation(summary = "Synchronously or asynchronously invokes an Operation at a specified path", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operation result object", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OperationResult.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "405", description = "Method not allowed - Invoke only valid for Operation submodel element", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<OperationResult> invokeOperationSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.PATH, description = "IdShort path to the submodel element (dot-separated), in this case an operation", required=true, schema=@Schema()) @PathVariable("idShortPath") String idShortPath, @Parameter(in = ParameterIn.DEFAULT, description = "Operation request object", required=true, schema=@Schema()) @Valid @RequestBody OperationRequest body, @Parameter(in = ParameterIn.QUERY, description = "Determines whether an operation invocation is performed asynchronously or synchronously" ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "async", required = false, defaultValue="false") Boolean async, @Parameter(in = ParameterIn.QUERY, description = "Determines the request or response kind of the resource" ,schema=@Schema(allowableValues={ "normal", "metadata", "value", "reference", "path" }
, defaultValue="normal")) @Valid @RequestParam(value = "content", required = false, defaultValue="normal") String content);


    @Operation(summary = "Creates a new Submodel", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Submodel created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Submodel.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Submodel> postSubmodel(@Parameter(in = ParameterIn.DEFAULT, description = "Submodel object", required=true, schema=@Schema()) @Valid @RequestBody Submodel body);


    @Operation(summary = "Creates a new submodel element at a specified path within submodel elements hierarchy", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Submodel element created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubmodelElement.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SubmodelElement> postSubmodelElementByPathSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.PATH, description = "IdShort path to the submodel element (dot-separated)", required=true, schema=@Schema()) @PathVariable("idShortPath") String idShortPath, @Parameter(in = ParameterIn.DEFAULT, description = "Requested submodel element", required=true, schema=@Schema()) @Valid @RequestBody SubmodelElement body, @Parameter(in = ParameterIn.QUERY, description = "Determines the structural depth of the respective resource content" ,schema=@Schema(allowableValues={ "deep", "core" }
, defaultValue="deep")) @Valid @RequestParam(value = "level", required = false, defaultValue="deep") String level, @Parameter(in = ParameterIn.QUERY, description = "Determines the request or response kind of the resource" ,schema=@Schema(allowableValues={ "normal", "metadata", "value", "reference", "path" }
, defaultValue="normal")) @Valid @RequestParam(value = "content", required = false, defaultValue="normal") String content, @Parameter(in = ParameterIn.QUERY, description = "Determines to which extent the resource is being serialized" ,schema=@Schema(allowableValues={ "withBlobValue", "withoutBlobValue" }
)) @Valid @RequestParam(value = "extent", required = false) String extent);


    @Operation(summary = "Creates a new submodel element", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Submodel element created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubmodelElement.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SubmodelElement> postSubmodelElementSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.DEFAULT, description = "Requested submodel element", required=true, schema=@Schema()) @Valid @RequestBody SubmodelElement body, @Parameter(in = ParameterIn.QUERY, description = "Determines the structural depth of the respective resource content" ,schema=@Schema(allowableValues={ "deep", "core" }
, defaultValue="deep")) @Valid @RequestParam(value = "level", required = false, defaultValue="deep") String level, @Parameter(in = ParameterIn.QUERY, description = "Determines the request or response kind of the resource" ,schema=@Schema(allowableValues={ "normal", "metadata", "value", "reference", "path" }
, defaultValue="normal")) @Valid @RequestParam(value = "content", required = false, defaultValue="normal") String content, @Parameter(in = ParameterIn.QUERY, description = "Determines to which extent the resource is being serialized" ,schema=@Schema(allowableValues={ "withBlobValue", "withoutBlobValue" }
)) @Valid @RequestParam(value = "extent", required = false) String extent);


    @Operation(summary = "Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Submodel element updated successfully"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "405", description = "Method not allowed - Upload only valid for File submodel element", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> putFileByPathSubmodelRepo(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.PATH, description = "IdShort path to the submodel element (dot-separated)", required=true, schema=@Schema()) @PathVariable("idShortPath") String idShortPath, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true,schema=@Schema()) @RequestParam(value="fileName", required=true)  String fileName, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file);


    @Operation(summary = "Updates an existing Submodel", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Submodel updated successfully"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> putSubmodelById(@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.DEFAULT, description = "Submodel object", required=true, schema=@Schema()) @Valid @RequestBody Submodel body);


    @Operation(summary = "Updates an existing submodel element at a specified path within submodel elements hierarchy", description = "", tags={ "Asset Administration Shell Environment API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Submodel element updated successfully"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),
        
        @ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
    @RequestMapping(value = "/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> putSubmodelElementByPathSubmodelRepo(
    		@Parameter(
    				in = ParameterIn.PATH, 
    				description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
    				required=true, 
    				schema=@Schema()
    			) 
    		@PathVariable("submodelIdentifier") 
    		String submodelIdentifier, 
    		
    		@Parameter(
    				in = ParameterIn.PATH, 
    				description = "IdShort path to the submodel element (dot-separated)", 
    				required=true, 
    				schema=@Schema()
    			) 
    		@PathVariable("idShortPath") 
    		String idShortPath, 
    		
    		@Parameter(
    				in = ParameterIn.DEFAULT, 
    				description = "Requested submodel element", 
    				required=true, 
    				schema=@Schema()
    			) 
    		@Valid 
    		@RequestBody 
    		SubmodelElement body, 
    		
    		@Parameter(
    				in = ParameterIn.QUERY, 
    				description = "Determines the structural depth of the respective resource content" ,
    				schema=@Schema(allowableValues={ "deep", "core" }, 
    				defaultValue="deep")
    			) 
    		@Valid 
    		@RequestParam(
    				value = "level", 
    				required = false, 
    				defaultValue="deep"
    			) 
    		String level, 
    		
    		@Parameter(
    				in = ParameterIn.QUERY, 
    				description = "Determines the request or response kind of the resource" ,
    				schema=@Schema(allowableValues={ "normal", "metadata", "value", "reference", "path" }, 
    				defaultValue="normal")
    			)
    		@Valid 
    		@RequestParam(
    				value = "content", 
    				required = false, 
    				defaultValue="normal"
    			) 
    		String content,
    		
    		@Parameter(
    				in = ParameterIn.QUERY, 
    				description = "Determines to which extent the resource is being serialized" ,
    				schema=@Schema(allowableValues={ "withBlobValue", "withoutBlobValue" })
    			) 
    		@Valid 
    		@RequestParam(value = "extent", required = false) 
    		String extent);

}

