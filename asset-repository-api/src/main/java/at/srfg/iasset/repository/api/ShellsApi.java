/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package at.srfg.iasset.repository.api;

import java.util.List;

import org.eclipse.aas4j.v3.model.AssetAdministrationShell;
import org.eclipse.aas4j.v3.model.AssetInformation;
import org.eclipse.aas4j.v3.model.Reference;
import org.eclipse.aas4j.v3.model.SpecificAssetId;
import org.eclipse.aas4j.v3.model.Submodel;
import org.eclipse.aas4j.v3.model.SubmodelElement;
import org.springframework.core.io.Resource;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import at.srfg.iasset.repository.api.exception.RepositoryException;
import at.srfg.iasset.repository.api.model.Result;
import at.srfg.iasset.repository.model.operation.OperationRequest;
import at.srfg.iasset.repository.model.operation.OperationResult;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;

@Validated
public interface ShellsApi {
	// @formatter:off
	/**
	 * Delete an {@link AssetAdministrationShell}, the referenced submodels remain unchanged
	 * @param aasIdentifier The UTF-8 base 64 encoded identifier.
	 * @return
	 * @throws RepositoryException
	 */
	@Operation(
			summary = "Deletes an Asset Administration Shell", 
			description = "", 
					tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "204", 
					description = "Asset Administration Shell deleted successfully"),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}", 
			produces = { "application/json" }, 
			method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteAssetAdministrationShellById(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) @PathVariable("aasIdentifier") 
			String aasIdentifier) throws RepositoryException;
	/**
	 * Delete a {@link SubmodelElement} at a specified path with the {@link Submodel} element's hierarchy.
	 * @param aasIdentifier The UTF-8 base 64 encoded identifier.
	 * @param submodelIdentifier  The UTF-8 base 64 encoded identifier.
	 * @param idShortPath The path pointing to the {@link SubmodelElement}
	 * @return
	 */
	@Operation(
			summary = "Deletes a submodel element at a specified path within the submodel elements hierarchy", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	
	@ApiResponses(value = { 
			@ApiResponse(
					responseCode = "204", 
					description = "Submodel element deleted successfully"),
			
			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),
			
			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath:.+}", 
			produces = { "application/json" }, 
			method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteSubmodelElementByPath(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) @PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) @PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "IdShort path to the submodel element (dot-separated)", 
					required = true, schema = @Schema()) 
			@PathVariable("idShortPath") 
			String idShortPath) throws RepositoryException;
	
	/**
	 * Delete a {@link Reference} to a {@link Submodel} from the {@link AssetAdministrationShell}
	 * @param aasIdentifier
	 * @param submodelIdentifier
	 * @return
	 * @throws RepositoryException
	 */
	@Operation(
			summary = "Deletes the submodel reference from the Asset Administration Shell", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = { 
			@ApiResponse(
					responseCode = "204", 
					description = "Submodel reference deleted successfully"),
			
			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),
			
			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}", 
			produces = {"application/json" }, 
			method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteSubmodelReferenceById(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) @PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) @PathVariable("submodelIdentifier") 
			String submodelIdentifier) throws RepositoryException;
	
	@Operation(
			summary = "Returns all Asset Administration Shells", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })

	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Requested Asset Administration Shells", 
					content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AssetAdministrationShell.class)))),
			
			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	
	@RequestMapping(
			value = "/shells", 
			produces = { "application/json" }, 
			method = RequestMethod.GET)
	List<AssetAdministrationShell> getAllAssetAdministrationShells(
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "A list of specific Asset identifiers", schema = @Schema()) 
			@Valid 
			@RequestParam(value = "assetIds", required = false) 
			List<SpecificAssetId> assetIds,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "The Asset Administration Shell’s IdShort", 
					schema = @Schema()) 
			@Valid 
			@RequestParam(value = "idShort", required = false) 
			String idShort) throws RepositoryException;

	@Operation(
			summary = "Returns all submodel elements including their hierarchy", 
			description = "", 
			tags = {	"Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "List of found submodel elements", 
					content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SubmodelElement.class)))),
			
			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements", 
			produces = {"application/json" }, 
			method = RequestMethod.GET)
	List<SubmodelElement> getAllSubmodelElements(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema()) 
			@PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the structural depth of the respective resource content", 
					schema = @Schema(allowableValues = {"deep","core" }, defaultValue = "deep")) 
			@Valid 
			@RequestParam(
					value = "level", 
					required = false, 
					defaultValue = "deep") 
			String level,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the request or response kind of the resource", 
					schema = @Schema(allowableValues = {"normal", "metadata", "value", "reference",	"path" }, defaultValue = "normal")) 
			@Valid 
			@RequestParam(
					value = "content", 
					required = false, 
					defaultValue = "normal") 
			String content,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines to which extent the resource is being serialized", 
					schema = @Schema(allowableValues = {"withBlobValue","withoutBlobValue" }))
			@Valid 
			@RequestParam(
					value = "extent", 
					required = false) 
			String extent) throws RepositoryException;
	
	/**
	 * Obtain all {@link Submodel} references from the {@link AssetAdministrationShell}
	 * @param aasIdentifier
	 * @return
	 * @throws RepositoryException
	 */

	@Operation(
			summary = "Returns all submodel references", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Requested submodel references", 
					content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, 
					array = @ArraySchema(schema = @Schema(implementation = Reference.class)))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class)))
			})
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels", 
			produces = { "application/json" }, 
			method = RequestMethod.GET)
	List<Reference> getAllSubmodelReferences(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier) throws RepositoryException;

	@Operation(summary = "Returns a specific Asset Administration Shell", description = "", tags = {
			"Asset Administration Shell Environment API" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Requested Asset Administration Shell", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AssetAdministrationShell.class))),

			@ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(responseCode = "500", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(value = "/old/{aasIdentifier}", produces = { "application/json" }, method = RequestMethod.GET)
	@Deprecated
	ResponseEntity<AssetAdministrationShell> getAssetAdministrationShellById(
			@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, schema = @Schema()) @PathVariable("aasIdentifier") String aasIdentifier)
			throws RepositoryException;

	/**
	 * Obtain an {@link AssetAdministrationShell} by it's unique identifier
	 * @param aasIdentifier The UTF-8 Base-64 encoded identifier
	 * @return The {@link AssetAdministrationShell}
	 * @throws RepositoryException 
	 */
    	@Operation(
			summary = "Returns a specific Asset Administration Shell", 
			description = "", 
			tags = {  "Asset Administration Shell Repository Interface (SPEC)" })
	
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Requested Asset Administration Shell", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = AssetAdministrationShell.class))),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "200", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) 
		})
	@RequestMapping(
			value = "/shells/{aasIdentifier}", 
			produces = { "application/json" }, 
			method = RequestMethod.GET)
	AssetAdministrationShell getAssetAdministrationShell(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier) throws RepositoryException;

    /**
     * Obtain the asset information for the requested {@link AssetAdministrationShell}
     * @param aasIdentifier The UTF-Base64 encoded identifier 
     * @return The {@link AssetInformation} 
     * throws {@link RepositoryException}
     */
	@Operation(
			summary = "Returns the Asset Information", 
			description = "", 
			tags = {  "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Requested Asset Information", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = AssetInformation.class))),

			@ApiResponse(
					responseCode = "200", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) 
			})
	@RequestMapping(
			value = "/shells/{aasIdentifier}/asset-information", 
			produces = { "application/json" }, 
			method = RequestMethod.GET)
	
	AssetInformation getAssetInformation(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier) throws RepositoryException;

	@Operation(
			summary = "Downloads file content from a specific submodel element from the Submodel at a specified path", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Requested file", 
					content = @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = Resource.class))),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "405", 
					description = "Method not allowed - Download only valid for File submodel element", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath:.+}/attachment", 
			produces = {"application/octet-stream", "application/json" }, 
			method = RequestMethod.GET)
	ResponseEntity<Resource> getFileByPath(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema()) @PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema()) @PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "IdShort path to the submodel element (dot-separated)", 
					required = true, schema = @Schema()) @PathVariable("idShortPath") 
			String idShortPath) throws RepositoryException;

	
	// @formatter:off

	@Operation(
			summary = "Returns the Operation result of an asynchronous invoked Operation", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Operation result object", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = OperationResult.class))),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "200", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath:.+}/operation-results/{handleId}", 
			produces = { "application/json" }, 
			method = RequestMethod.GET)
	ResponseEntity<OperationResult> getOperationAsyncResult(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "IdShort path to the submodel element (dot-separated), in this case an operation", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("idShortPath") 
			String idShortPath,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("handleId") 
			String handleId,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "", 
					schema = @Schema(allowableValues = { "normal", "value" }, defaultValue = "normal")) 
			@Valid 
			@RequestParam(value = "content", required = false, defaultValue = "normal") 
			String content) throws RepositoryException;

	// @formatter:off
	
	@Operation(
			summary = "Returns the Submodel", 
			description = "", 
			tags = {"Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Requested Submodel", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Submodel.class))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel", 
			produces = {	"application/json" }, 
			method = RequestMethod.GET)
	Submodel getSubmodel(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the structural depth of the respective resource content", 
					schema = @Schema(allowableValues = {"deep","core" }, 
					defaultValue = "deep")) 
			@Valid 
			@RequestParam(
					value = "level", 
					required = false, 
					defaultValue = "deep") 
			String level,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the request or response kind of the resource", 
					schema = @Schema(allowableValues = { "normal", "metadata", "value", "reference", "path" }, 
					defaultValue = "normal")) 
			@Valid 
			@RequestParam(
					value = "content", 
					required = false, 
					defaultValue = "normal") 
			String content,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines to which extent the resource is being serialized", 
					schema = @Schema(allowableValues = {"withBlobValue","withoutBlobValue" })) 
			@Valid 
			@RequestParam(
					value = "extent", 
					required = false,
					defaultValue = "withoutBlobValue") 
			String extent) throws RepositoryException;
	

	@Operation(
			summary = "Returns a specific submodel element from the Submodel at a specified path", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Requested submodel element", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = SubmodelElement.class))),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath:.+}", 
			produces = { "application/json" }, 
			method = RequestMethod.GET)
	SubmodelElement getSubmodelElementByPath(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema()) @PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "IdShort path to the submodel element (dot-separated)", 
					required = true, schema = @Schema()) @PathVariable("idShortPath") 
			String idShortPath,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the structural depth of the respective resource content", 
					schema = @Schema(allowableValues = {"deep","core" }, 
					defaultValue = "deep")) 
			@Valid 
			@RequestParam(
					value = "level", 
					required = false, 
					defaultValue = "deep") 
			String level,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the request or response kind of the resource", 
					schema = @Schema(allowableValues = { "normal", "metadata", "value", "reference", "path" }, 
					defaultValue = "normal")) 
			@Valid 
			@RequestParam(
					value = "content", 
					required = false, 
					defaultValue = "normal") 
			String content,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines to which extent the resource is being serialized", 
					schema = @Schema(allowableValues = {"withBlobValue","withoutBlobValue" })) 
			@Valid 
			@RequestParam(
					value = "extent", 
					required = false,
					defaultValue = "withoutBlobValue") 
			String extent) throws RepositoryException;
	
	@Operation(
			summary = "Synchronously or asynchronously invokes an Operation at a specified path", 
			description = "", 
			tags = {"Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "200", 
					description = "Operation result object", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = OperationResult.class))),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "405", 
					description = "Method not allowed - Invoke only valid for Operation submodel element", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "200", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath:.+}/invoke", 
			produces = {"application/json" }, 
			consumes = { "application/json" }, 
			method = RequestMethod.POST)
	OperationResult invokeOperation(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true,
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "IdShort path to the submodel element (dot-separated), in this case an operation", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("idShortPath") 
			String idShortPath,
			@Parameter(
					in = ParameterIn.DEFAULT, 
					description = "Operation request object", 
					required = true, 
					schema = @Schema()) 
			@Valid 
			@RequestBody 
			OperationRequest body,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines whether an operation invocation is performed asynchronously or synchronously", schema = @Schema(defaultValue = "false")) @Valid @RequestParam(value = "async", required = false, defaultValue = "false") Boolean async,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the request or response kind of the resource", 
					schema = @Schema(allowableValues = {"normal", "metadata", "value", "reference",	"path" }, 
					defaultValue = "normal")) 
			@Valid 
			@RequestParam(
					value = "content", 
					required = false, 
					defaultValue = "normal") 
			String content) throws RepositoryException;

	@Operation(
			summary = "Creates a new Asset Administration Shell", 
			description = "", 
			tags = {"Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "201", 
					description = "Asset Administration Shell created successfully", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = AssetAdministrationShell.class))),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "200", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells", 
			produces = { "application/json" }, 
			consumes = { "application/json" }, 
			method = RequestMethod.POST)
	AssetAdministrationShell postAssetAdministrationShell(
			@Parameter(
					in = ParameterIn.DEFAULT, 
					description = "Asset Administration Shell object", 
					required = true, schema = @Schema()) 
			@Valid 
			@RequestBody 
			AssetAdministrationShell body) throws RepositoryException;

	@Operation(
			summary = "Creates a new submodel element", 
			description = "", 
			tags = {"Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "201", 
					description = "Submodel element created successfully", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = SubmodelElement.class))),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "200", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements", 
			produces = { "application/json" }, 
			consumes = { "application/json" }, 
			method = RequestMethod.POST)
	ResponseEntity<SubmodelElement> postSubmodelElement(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.DEFAULT, 
					description = "Requested submodel element", 
					required = true, 
					schema = @Schema()) 
			@Valid 
			@RequestBody 
			SubmodelElement body,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the structural depth of the respective resource content", 
					schema = @Schema(allowableValues = {"deep",	"core" }, defaultValue = "deep")) 
			@Valid 
			@RequestParam(
					value = "level", 
					required = false, 
					defaultValue = "deep") 
			String level,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the request or response kind of the resource", 
					schema = @Schema(allowableValues = { "normal", "metadata", "value", "reference", "path" }, 
					defaultValue = "normal")) 
			@Valid 
			@RequestParam(
					value = "content", 
					required = false, 
					defaultValue = "normal") 
			String content,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines to which extent the resource is being serialized", 
					schema = @Schema(allowableValues = {"withBlobValue","withoutBlobValue" }))
			@Valid 
			@RequestParam(
					value = "extent", 
					required = false) 
			String extent) throws RepositoryException;

	@Operation(
			summary = "Creates a new submodel element at a specified path within submodel elements hierarchy", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "201", 
					description = "Submodel element created successfully", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = SubmodelElement.class))),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "200", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath:.+}", 
			produces = { "application/json" }, 
			consumes = { "application/json" }, 
			method = RequestMethod.POST)
	ResponseEntity<SubmodelElement> postSubmodelElementByPath(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema()) 
			@PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "IdShort path to the submodel element (dot-separated)", 
					required = true, schema = @Schema())
			@PathVariable("idShortPath") 
			String idShortPath,
			@Parameter(
					in = ParameterIn.DEFAULT, 
					description = "Requested submodel element", 
					required = true, schema = @Schema()) 
			@Valid 
			@RequestBody 
			SubmodelElement body,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the structural depth of the respective resource content", 
					schema = @Schema(allowableValues = { "deep", "core" }, defaultValue = "deep")) 
			@Valid 
			@RequestParam(
					value = "level", 
					required = false, 
					defaultValue = "deep") 
			String level,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the request or response kind of the resource", 
					schema = @Schema(allowableValues = { "normal", "metadata", "value", "reference", "path" }, defaultValue = "normal")) 
			@Valid 
			@RequestParam(
					value = "content", 
					required = false, 
					defaultValue = "normal") 
			String content,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines to which extent the resource is being serialized", 
					schema = @Schema(allowableValues = { "withBlobValue", "withoutBlobValue" }))
			@Valid 
			@RequestParam(
					value = "extent", 
					required = false)
			String extent) throws RepositoryException;

	@Operation(summary = "Creates a submodel reference at the Asset Administration Shell", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "201", 
					description = "Submodel reference created successfully", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Reference.class))),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels", 
			produces = { "application/json" }, 
			consumes = { "application/json" }, 
			method = RequestMethod.POST)
	ResponseEntity<Reference> postSubmodelReference(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema())
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.DEFAULT,
					description = "Reference to the Submodel",
					required = true, schema = @Schema())
			@Valid
			@RequestBody
			Reference body) throws RepositoryException;

	@Operation(
			summary = "Updates an existing Asset Administration Shell", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "204", 
					description = "Asset Administration Shell updated successfully"),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json",
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "200",
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	
	@RequestMapping(
			value = "/shells/{aasIdentifier}", 
			produces = { "application/json" }, 
			consumes = { "application/json" },
			method = RequestMethod.PUT)
	ResponseEntity<Void> putAssetAdministrationShellById(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true,
					schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			
			@Parameter(
					in = ParameterIn.DEFAULT,
					description = "Asset Administration Shell object", 
					required = true, 
					schema = @Schema()) 
			@Valid 
			@RequestBody 
			AssetAdministrationShell body) throws RepositoryException;

	@Operation(
			summary = "Updates the Asset Information", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = { 
			@ApiResponse(
					responseCode = "204", 
					description = "Asset Information updated successfully"),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/asset-information", 
			produces = { "application/json" }, 
			consumes = { "application/json" }, 
			method = RequestMethod.PUT)
	ResponseEntity<Void> putAssetInformation(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema()) 
			@PathVariable("aasIdentifier") 
			String aasIdentifier,
			@Parameter(
					in = ParameterIn.DEFAULT, 
					description = "Asset Information object", 
					required = true, 
					schema = @Schema()) 
			@Valid
			@RequestBody 
			AssetInformation body) throws RepositoryException;

	// @formatter:on

	@Operation(summary = "Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy", description = "", tags = {
			"Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = { @ApiResponse(responseCode = "204", description = "Submodel element updated successfully"),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(responseCode = "405", description = "Method not allowed - Upload only valid for File submodel element", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath:.+}/attachment", produces = {
			"application/json" }, consumes = { "multipart/form-data" }, method = RequestMethod.PUT)
	ResponseEntity<Void> putFileByPath(
			@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, schema = @Schema()) @PathVariable("aasIdentifier") String aasIdentifier,
			@Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required = true, schema = @Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier,
			@Parameter(in = ParameterIn.PATH, description = "IdShort path to the submodel element (dot-separated)", required = true, schema = @Schema()) @PathVariable("idShortPath") String idShortPath,
			@Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @RequestParam(value = "fileName", required = true) String fileName,
			@Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file);

	/**
	 * Update the {@link Submodel} including its {@link SubmodelElement}s
	 * 
	 * @param aasIdentifier
	 * @param submodelIdentifier
	 * @param body
	 * @param level
	 * @param content
	 * @param extent
	 * @return
	 * @throws RepositoryException
	 */
	// @formatter:off
	@Operation(
			summary = "Updates the Submodel", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = { 
			@ApiResponse(
					responseCode = "204", 
					description = "Submodel updated successfully"),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel", 
			produces = { "application/json" }, 
			consumes = { "application/json" }, 
			method = RequestMethod.PUT)
	ResponseEntity<Void> putSubmodel(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, schema = @Schema()) @PathVariable("aasIdentifier") String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required = true, schema = @Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier,
			@Parameter(
					in = ParameterIn.DEFAULT, 
					description = "Submodel object", 
					required = true, schema = @Schema()) 
			@Valid 
			@RequestBody 
			Submodel body,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the structural depth of the respective resource content", 
					schema = @Schema(allowableValues = {"deep", "core" }, defaultValue = "deep")) 
			@Valid 
			@RequestParam(
					value = "level", required = false, defaultValue = "deep") 
			String level,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the request or response kind of the resource", 
					schema = 
					@Schema(allowableValues = { "normal", "metadata", "value", "reference", "path" }, defaultValue = "normal")) 
			@Valid 
			@RequestParam(
					value = "content", 
					required = false, 
					defaultValue = "normal") 
			String content,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines to which extent the resource is being serialized", 
					schema = @Schema(allowableValues = { "withBlobValue", "withoutBlobValue" })) 
			@Valid 
			@RequestParam(
					value = "extent", 
					required = false) 
			String extent) throws RepositoryException;

	/**
	 * Update an existing {@link SubmodelElement} at a specified path within the {@link Submodel} element's hierarchy
	 * @param aasIdentifier
	 * @param submodelIdentifier
	 * @param idShortPath
	 * @param body
	 * @param level
	 * @param content
	 * @param extent
	 * @return
	 * @throws RepositoryException
	 */
	@Operation(
			summary = "Updates an existing submodel element at a specified path within submodel elements hierarchy", 
			description = "", 
			tags = { "Asset Administration Shell Repository Interface (SPEC)" })
	@ApiResponses(value = { 
			@ApiResponse(
					responseCode = "204", 
					description = "Submodel element updated successfully"),

			@ApiResponse(
					responseCode = "400", 
					description = "Bad Request", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),

			@ApiResponse(
					responseCode = "500", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	
	@RequestMapping(
			value = "/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath:.+}",
			produces = { "application/json" }, 
			consumes = { "application/json" }, 
			method = RequestMethod.PUT)
	ResponseEntity<Void> putSubmodelElementByPath(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, schema = @Schema()) @PathVariable("aasIdentifier") String aasIdentifier,
			@Parameter(
					in = ParameterIn.PATH, description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("submodelIdentifier") 
			String submodelIdentifier,
			@Parameter(
					in = ParameterIn.PATH, 
					description = "IdShort path to the submodel element (dot-separated)", required = true, schema = @Schema()) @PathVariable("idShortPath") String idShortPath,
			@Parameter(
					in = ParameterIn.DEFAULT, 
					description = "Requested submodel element", required = true, schema = @Schema()) @Valid @RequestBody SubmodelElement body,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the structural depth of the respective resource content", schema = @Schema(allowableValues = {
					"deep",
					"core" }, defaultValue = "deep")) @Valid @RequestParam(value = "level", required = false, defaultValue = "deep") String level,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines the request or response kind of the resource", 
					schema = @Schema(allowableValues = { "normal", "metadata", "value", "reference", "path" }, defaultValue = "normal"))
			@Valid 
			@RequestParam(
					value = "content", 
					required = false, 
					defaultValue = "normal") 
			String content,
			@Parameter(
					in = ParameterIn.QUERY, 
					description = "Determines to which extent the resource is being serialized", 
					schema = @Schema(allowableValues = { "withBlobValue", "withoutBlobValue" })) 
			@Valid @
			RequestParam(
					value = "extent", 
					required = false) 
			String extent) throws RepositoryException;
	// @formatter:on
}
