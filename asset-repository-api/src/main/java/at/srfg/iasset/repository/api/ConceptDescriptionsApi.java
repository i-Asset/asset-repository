/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package at.srfg.iasset.repository.api;

import java.util.List;

import org.eclipse.digitaltwin.aas4j.v3.model.ConceptDescription;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import at.srfg.iasset.repository.api.model.Result;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;

@Validated
public interface ConceptDescriptionsApi {
	/**
	 * Delete a {@link ConceptDescription} with it's identifier
	 * @param cdIdentifier UTF8-base64-encoded unique identifier of the {@link ConceptDescription}
	 * @return 
	 */
	@Operation(summary = "Deletes a Concept Description", description = "", tags = {
			"Asset Administration Shell Environment API" })
	@ApiResponses(value = {
			@ApiResponse(
					responseCode = "204", 
					description = "Concept Description deleted successfully"),
			@ApiResponse(
					responseCode = "404", 
					description = "Not Found", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))),		
			@ApiResponse(
					responseCode = "200", 
					description = "Default error handling for unmentioned status codes", 
					content = @Content(mediaType = "application/json", 
					schema = @Schema(implementation = Result.class))) })
	@RequestMapping(
			value = "/concept-descriptions/{cdIdentifier}", produces = {"application/json"}, 
	method = RequestMethod.DELETE)
	ResponseEntity<Result> deleteConceptDescriptionById(
			@Parameter(
					in = ParameterIn.PATH, 
					description = "The Concept Description’s unique id (UTF8-BASE64-URL-encoded)", 
					required = true, 
					schema = @Schema()) 
			@PathVariable("cdIdentifier") String cdIdentifier);

	@Operation(summary = "Returns all Concept Descriptions", description = "", tags = {
			"Asset Administration Shell Environment API" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Requested Concept Descriptions", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ConceptDescription.class)))),

			@ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(value = "/concept-descriptions", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<ConceptDescription>> getAllConceptDescriptions(
			@Parameter(in = ParameterIn.QUERY, description = "The Concept Description’s IdShort", schema = @Schema()) @Valid @RequestParam(value = "idShort", required = false) String idShort,
			@Parameter(in = ParameterIn.QUERY, description = "IsCaseOf reference (UTF8-BASE64-URL-encoded)", schema = @Schema()) @Valid @RequestParam(value = "isCaseOf", required = false) String isCaseOf,
			@Parameter(in = ParameterIn.QUERY, description = "DataSpecification reference (UTF8-BASE64-URL-encoded)", schema = @Schema()) @Valid @RequestParam(value = "dataSpecificationRef", required = false) String dataSpecificationRef);

	@Operation(summary = "Returns a specific Concept Description", description = "", tags = {
			"Asset Administration Shell Environment API" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Requested Concept Description", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ConceptDescription.class))),

			@ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(value = "/concept-descriptions/{cdIdentifier}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<ConceptDescription> getConceptDescriptionById(
			@Parameter(in = ParameterIn.PATH, description = "The Concept Description’s unique id (UTF8-BASE64-URL-encoded)", required = true, schema = @Schema()) @PathVariable("cdIdentifier") String cdIdentifier);

	@Operation(summary = "Creates a new Concept Description", description = "", tags = {
			"Asset Administration Shell Environment API" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Concept Description created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ConceptDescription.class))),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(value = "/concept-descriptions", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<ConceptDescription> postConceptDescription(
			@Parameter(in = ParameterIn.DEFAULT, description = "Concept Description object", required = true, schema = @Schema()) @Valid @RequestBody ConceptDescription body);

	@Operation(summary = "Updates an existing Concept Description", description = "", tags = {
			"Asset Administration Shell Environment API" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "204", description = "Concept Description updated successfully"),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))),

			@ApiResponse(responseCode = "200", description = "Default error handling for unmentioned status codes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))) })
	@RequestMapping(value = "/concept-descriptions/{cdIdentifier}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> putConceptDescriptionById(
			@Parameter(in = ParameterIn.PATH, description = "The Concept Description’s unique id (UTF8-BASE64-URL-encoded)", required = true, schema = @Schema()) @PathVariable("cdIdentifier") String cdIdentifier,
			@Parameter(in = ParameterIn.DEFAULT, description = "Concept Description object", required = true, schema = @Schema()) @Valid @RequestBody ConceptDescription body);

}
